/* 프로토타입
* 자바스크립트의 모든 객체는 자신의 부모역할을 하는 객체와 연결되어 있다.
* 그리고 이것은 마치 객체지향의 상속 개념과 같이 부모 객체의 프로퍼티를 마치 자신의 것처럼 쓸 수 있는것 같은 특징이 있다.
* 자바스크립트에서는 이러한 부모객체를 프로토타입 객체라고 부른다. */

// 객체 리터럴 방식으로 foo 객체 생성
 var foo = {
     name: 'foo',
     age: 30
 };


/* foo객체에는 toString() 메서드가 없으므로 에러가 발생해야 하지만,
 * 정상적으로 결과가 출력되는걸 확인할 수 있다.
 * 에러가 발생하지않고 예제가 실행될 수 있는 이유는 바로 foo 객체의 프로토타입에 toString() 메서드가 이미 정의되어있고,
 * foo객체가 상속처럼 toString()메서드를 호출했기 때문이다. */
foo.toString();



 /* foo객체 출력
 *  실행해보면 객체 리터럴로 생성한 name과 age이외에도 foo객체에 <prototype>프로퍼티가 있다는걸 확인할 수 있다.
 * 이 프로퍼티가 foo객체의 부모인 프로토타입 객체를 가리킨다.
 * 프로토타입객체에 toString()메서드가 정의되어있기 때문에 에러가 나지 않은것이다.
 * 이 프로토타입 객체에는 모든 객체에서 호출 가능한 자바스크립트 기본 내장 메서드가 포함되어있다. */
 console.dir(foo);



 /* 모든 객체는 자신의 부모 역할을 하는 프로토타입 객체를 가리키는 숨겨진 프로퍼티가 있다.
 * 또한, 객체를 생성할 때 결정된 프로토타입 객체는 임의의 다른 객체로 변경하는것도 가능하다.
 * 즉, 부모객체를 동적으로 바꿀수도 있는것이다.
 * 자바스크립트에서는 이러한 특징을 활용해서 객체 상속 등의 기능을 구현한다. */